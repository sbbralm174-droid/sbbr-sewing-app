// components/CustomTiptapEditor.tsx
'use client'; // ‡¶è‡¶ü‡¶ø ‡¶Ö‡¶™‡¶∞‡¶ø‡¶π‡¶æ‡¶∞‡ßç‡¶Ø, ‡¶è‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ï‡ßç‡¶≤‡¶æ‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶ï‡¶Æ‡ßç‡¶™‡ßã‡¶®‡ßá‡¶®‡ßç‡¶ü ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶ö‡¶ø‡¶π‡ßç‡¶®‡¶ø‡¶§ ‡¶ï‡¶∞‡¶¨‡ßá

import React, { useCallback } from 'react';
import { useEditor, EditorContent } from '@tiptap/react';
import StarterKit from '@tiptap/starter-kit';
import Underline from '@tiptap/extension-underline';
import Link from '@tiptap/extension-link';
import TextAlign from '@tiptap/extension-text-align';
import Highlight from '@tiptap/extension-highlight';

// ‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡ßã‡¶®‡ßã ‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ CSS ‡¶∏‡ßç‡¶ü‡¶æ‡¶á‡¶≤ ‡¶•‡¶æ‡¶ï‡ßá Tiptap ‡¶è‡¶°‡¶ø‡¶ü‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø,
// ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶á‡¶Æ‡ßç‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®, ‡¶Ø‡ßá‡¶Æ‡¶®:
// import './CustomTiptapEditor.module.css';
// ‡¶Ö‡¶•‡¶¨‡¶æ, ‡¶Ü‡¶™‡¶®‡¶ø Tailwind CSS ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®, ‡¶Ø‡¶æ ‡¶è‡¶á ‡¶ï‡ßã‡¶°‡ßá ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§

interface CustomTiptapEditorProps {
  initialContent: string; // ‡¶è‡¶°‡¶ø‡¶ü‡¶∞‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶æ‡¶•‡¶Æ‡¶ø‡¶ï ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶ü (HTML ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç)
  onContentChange: (html: string) => void; // ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶ü ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶π‡¶≤‡ßá ‡¶ï‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
}

// ‡¶è‡¶ü‡¶ø ‡¶è‡¶°‡¶ø‡¶ü‡¶∞‡ßá‡¶∞ ‡¶ü‡ßÅ‡¶≤‡¶¨‡¶æ‡¶∞ ‡¶ï‡¶Æ‡ßç‡¶™‡ßã‡¶®‡ßá‡¶®‡ßç‡¶ü
const MenuBar = ({ editor }: { editor: any }) => {
  if (!editor) {
    return null; // ‡¶è‡¶°‡¶ø‡¶ü‡¶∞ ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤‡¶æ‡¶á‡¶ú ‡¶®‡¶æ ‡¶π‡¶≤‡ßá ‡¶ü‡ßÅ‡¶≤‡¶¨‡¶æ‡¶∞ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá ‡¶®‡¶æ
  }

  // ‡¶¨‡¶æ‡¶ü‡¶®‡¶ó‡ßÅ‡¶≤‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡ßá‡¶∏‡¶ø‡¶ï Tailwind CSS ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏
  const buttonClass = "p-2 border border-gray-300 rounded m-1 text-sm transition-colors duration-200 ease-in-out";
  const activeClass = "bg-blue-500 text-white hover:bg-blue-600";
  const inactiveClass = "bg-white text-gray-700 hover:bg-gray-100";

  // ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶Æ‡ßç‡¶™‡¶ü ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
  const setLink = useCallback(() => {
    const previousUrl = editor.getAttributes('link').href;
    const url = window.prompt('URL ‡¶¶‡¶ø‡¶®', previousUrl);

    // ‡¶Ø‡¶¶‡¶ø ‡¶™‡ßç‡¶∞‡¶Æ‡ßç‡¶™‡¶ü ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º
    if (url === null) {
      return;
    }

    // ‡¶Ø‡¶¶‡¶ø URL ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶π‡¶Ø‡¶º, ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶¶‡¶ø‡¶®
    if (url === '') {
      editor.chain().focus().extendMarkRange('link').unsetLink().run();
      return;
    }

    // ‡¶®‡¶§‡ßÅ‡¶® ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
    editor.chain().focus().extendMarkRange('link').setLink({ href: url }).run();
  }, [editor]);

  return (
    <div className="flex flex-wrap border border-gray-300 p-2 mb-2 rounded-md shadow-sm bg-gray-50">
      <button
        onClick={() => editor.chain().focus().toggleBold().run()}
        className={`${buttonClass} ${editor.isActive('bold') ? activeClass : inactiveClass}`}
        title="Bold"
      >
        **B**
      </button>
      <button
        onClick={() => editor.chain().focus().toggleItalic().run()}
        className={`${buttonClass} ${editor.isActive('italic') ? activeClass : inactiveClass}`}
        title="Italic"
      >
        *I*
      </button>
      <button
        onClick={() => editor.chain().focus().toggleUnderline().run()}
        className={`${buttonClass} ${editor.isActive('underline') ? activeClass : inactiveClass}`}
        title="Underline"
      >
        <u>U</u>
      </button>
      <button
        onClick={() => editor.chain().focus().toggleStrike().run()}
        className={`${buttonClass} ${editor.isActive('strike') ? activeClass : inactiveClass}`}
        title="Strikethrough"
      >
        <s>S</s>
      </button>
      <button
        onClick={setLink}
        className={`${buttonClass} ${editor.isActive('link') ? activeClass : inactiveClass}`}
        title="Set Link"
      >
        üîó Link
      </button>
      <button
        onClick={() => editor.chain().focus().unsetLink().run()}
        disabled={!editor.isActive('link')}
        className={`${buttonClass} ${!editor.isActive('link') ? 'cursor-not-allowed opacity-50' : inactiveClass}`}
        title="Unlink"
      >
        üîó Unlink
      </button>
      <button
        onClick={() => editor.chain().focus().toggleCode().run()}
        className={`${buttonClass} ${editor.isActive('code') ? activeClass : inactiveClass}`}
        title="Code"
      >
        `Code`
      </button>

      {/* Heading options */}
      <button
        onClick={() => editor.chain().focus().toggleHeading({ level: 1 }).run()}
        className={`${buttonClass} ${editor.isActive('heading', { level: 1 }) ? activeClass : inactiveClass}`}
        title="Heading 1"
      >
        H1
      </button>
      <button
        onClick={() => editor.chain().focus().toggleHeading({ level: 2 }).run()}
        className={`${buttonClass} ${editor.isActive('heading', { level: 2 }) ? activeClass : inactiveClass}`}
        title="Heading 2"
      >
        H2
      </button>
      <button
        onClick={() => editor.chain().focus().toggleHeading({ level: 3 }).run()}
        className={`${buttonClass} ${editor.isActive('heading', { level: 3 }) ? activeClass : inactiveClass}`}
        title="Heading 3"
      >
        H3
      </button>

      {/* List options */}
      <button
        onClick={() => editor.chain().focus().toggleBulletList().run()}
        className={`${buttonClass} ${editor.isActive('bulletList') ? activeClass : inactiveClass}`}
        title="Bullet List"
      >
        ‚Ä¢ List
      </button>
      <button
        onClick={() => editor.chain().focus().toggleOrderedList().run()}
        className={`${buttonClass} ${editor.isActive('orderedList') ? activeClass : inactiveClass}`}
        title="Ordered List"
      >
        1. List
      </button>

      {/* Alignment options */}
      <button
        onClick={() => editor.chain().focus().setTextAlign('left').run()}
        className={`${buttonClass} ${editor.isActive({ textAlign: 'left' }) ? activeClass : inactiveClass}`}
        title="Align Left"
      >
        Left
      </button>
      <button
        onClick={() => editor.chain().focus().setTextAlign('center').run()}
        className={`${buttonClass} ${editor.isActive({ textAlign: 'center' }) ? activeClass : inactiveClass}`}
        title="Align Center"
      >
        Center
      </button>
      <button
        onClick={() => editor.chain().focus().setTextAlign('right').run()}
        className={`${buttonClass} ${editor.isActive({ textAlign: 'right' }) ? activeClass : inactiveClass}`}
        title="Align Right"
      >
        Right
      </button>
      <button
        onClick={() => editor.chain().focus().setTextAlign('justify').run()}
        className={`${buttonClass} ${editor.isActive({ textAlign: 'justify' }) ? activeClass : inactiveClass}`}
        title="Justify"
      >
        Justify
      </button>

      {/* Highlight option */}
      <button
        onClick={() => editor.chain().focus().toggleHighlight().run()}
        className={`${buttonClass} ${editor.isActive('highlight') ? activeClass : inactiveClass}`}
        title="Highlight"
      >
        üñçÔ∏è Highlight
      </button>

      {/* Undo/Redo */}
      <button
        onClick={() => editor.chain().focus().undo().run()}
        disabled={!editor.can().undo()}
        className={`${buttonClass} ${!editor.can().undo() ? 'cursor-not-allowed opacity-50' : inactiveClass}`}
        title="Undo"
      >
        ‚Ü©Ô∏è Undo
      </button>
      <button
        onClick={() => editor.chain().focus().redo().run()}
        disabled={!editor.can().redo()}
        className={`${buttonClass} ${!editor.can().redo() ? 'cursor-not-allowed opacity-50' : inactiveClass}`}
        title="Redo"
      >
        ‚Ü™Ô∏è Redo
      </button>
    </div>
  );
};

// ‡¶è‡¶ü‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® Tiptap Editor ‡¶ï‡¶Æ‡ßç‡¶™‡ßã‡¶®‡ßá‡¶®‡ßç‡¶ü
export function CustomTiptapEditor({ initialContent, onContentChange }: CustomTiptapEditorProps) {
  const editor = useEditor({
    extensions: [
      StarterKit, // ‡¶¨‡ßá‡¶∏‡¶ø‡¶ï ‡¶è‡¶ï‡ßç‡¶∏‡¶ü‡ßá‡¶®‡¶∂‡¶® ‡¶Ø‡ßá‡¶Æ‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶∞‡¶æ‡¶ó‡ßç‡¶∞‡¶æ‡¶´, ‡¶¨‡ßã‡¶≤‡ßç‡¶°, ‡¶á‡¶ü‡¶æ‡¶≤‡¶ø‡¶ï, ‡¶ï‡ßã‡¶° ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø
      Underline,  // ‡¶Ü‡¶®‡ßç‡¶°‡¶æ‡¶∞‡¶≤‡¶æ‡¶á‡¶® ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá
      Link.configure({
        openOnClick: false, // ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡¶≤‡ßá ‡¶è‡¶°‡¶ø‡¶ü‡¶∞ ‡¶Æ‡ßã‡¶°‡ßá ‡¶®‡¶æ ‡¶ñ‡ßÅ‡¶≤‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶ü‡ßç‡¶Ø‡¶æ‡¶¨‡ßá ‡¶ñ‡ßÅ‡¶≤‡¶¨‡ßá
      }),
      Highlight, // ‡¶π‡¶æ‡¶á‡¶≤‡¶æ‡¶á‡¶ü ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü
      TextAlign.configure({
        types: ['heading', 'paragraph'], // ‡¶π‡ßá‡¶°‡¶ø‡¶Ç ‡¶è‡¶¨‡¶Ç ‡¶™‡ßç‡¶Ø‡¶æ‡¶∞‡¶æ‡¶ó‡ßç‡¶∞‡¶æ‡¶´‡ßá ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶≤‡¶æ‡¶á‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü
      }),
      // ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶® ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø Tiptap ‡¶è‡¶ï‡ßç‡¶∏‡¶ü‡ßá‡¶®‡¶∂‡¶® ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
      // ‡¶Ø‡ßá‡¶Æ‡¶®: Image, Table, CodeBlock ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø
    ],
    content: initialContent, // ‡¶è‡¶°‡¶ø‡¶ü‡¶∞ ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤‡¶æ‡¶á‡¶ú ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶™‡ßç‡¶∞‡¶æ‡¶•‡¶Æ‡¶ø‡¶ï ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
    onUpdate: ({ editor }) => {
      // ‡¶Ø‡¶ñ‡¶® ‡¶è‡¶°‡¶ø‡¶ü‡¶∞‡ßá‡¶∞ ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶ü ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶π‡¶¨‡ßá, ‡¶§‡¶ñ‡¶® ‡¶è‡¶á ‡¶ï‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø HTML ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶ü ‡¶´‡ßá‡¶∞‡¶§ ‡¶¶‡ßá‡¶¨‡ßá
      onContentChange(editor.getHTML());
    },
    // !!! ‡¶è‡¶á ‡¶≤‡¶æ‡¶á‡¶®‡¶ü‡¶ø ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá Tiptap ‡¶è‡¶∞‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ !!!
    // ‡¶è‡¶ü‡¶ø Tiptap ‡¶ï‡ßá ‡¶¨‡¶≤‡ßá ‡¶Ø‡ßá ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞-‡¶∏‡¶æ‡¶á‡¶°‡ßá ‡¶∞‡ßá‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶®‡¶æ ‡¶ï‡¶∞‡ßá ‡¶ï‡ßç‡¶≤‡¶æ‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü-‡¶∏‡¶æ‡¶á‡¶°‡ßá‡¶á ‡¶∞‡ßá‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶§‡ßá‡•§
    immediatelyRender: false,
  });

  // ‡¶è‡¶°‡¶ø‡¶ü‡¶∞ ‡¶™‡ßÅ‡¶∞‡ßã‡¶™‡ßÅ‡¶∞‡¶ø ‡¶≤‡ßã‡¶° ‡¶®‡¶æ ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶≤‡ßã‡¶°‡¶ø‡¶Ç ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶¶‡ßá‡¶ñ‡¶æ‡¶® (‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£)
  if (!editor) {
    return <div className="p-4 border rounded-md text-gray-500">Loading editor...</div>;
  }

  return (
    <div className="border border-gray-300 rounded-md p-4 bg-white shadow-sm">
      <MenuBar editor={editor} />
      {/* EditorContent ‡¶ï‡¶Æ‡ßç‡¶™‡ßã‡¶®‡ßá‡¶®‡ßç‡¶ü‡¶ü‡¶ø ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá ‡¶è‡¶°‡¶ø‡¶ü‡¶∞‡ßá‡¶∞ actual ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶è‡¶∞‡¶ø‡ßü‡¶æ ‡¶•‡¶æ‡¶ï‡¶¨‡ßá */}
      <EditorContent editor={editor} className="min-h-[200px] p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
      {/*
        ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶™‡¶®‡¶ø Tiptap ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶∏‡ßç‡¶ü‡¶æ‡¶á‡¶≤ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®,
        ‡¶Ø‡ßá‡¶Æ‡¶®: ul, ol, h1, p ‡¶ü‡ßç‡¶Ø‡¶æ‡¶ó‡¶ó‡ßÅ‡¶≤‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§
        ‡¶Ö‡¶•‡¶¨‡¶æ, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ó‡ßç‡¶≤‡ßã‡¶¨‡¶æ‡¶≤ CSS ‡¶´‡¶æ‡¶á‡¶≤‡ßá (globals.css) Tiptap ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡ßá‡¶∏‡¶ø‡¶ï ‡¶∏‡ßç‡¶ü‡¶æ‡¶á‡¶≤ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§
        ‡¶Ø‡ßá‡¶Æ‡¶®:
        .ProseMirror { /* Tiptap ‡¶è‡¶∞ ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶ü ‡¶è‡¶∞‡¶ø‡ßü‡¶æ */
        /* outline: none; */
        /* } */
        /* .ProseMirror p { */
        /* margin: 0 0 1em 0; */
        /* } */
        /* .ProseMirror ul, .ProseMirror ol { */
        /* padding-left: 1.5em; */
        /* margin-bottom: 1em; */
        /* } */
        /* .ProseMirror h1, .ProseMirror h2, .ProseMirror h3 { */
        /* margin-top: 1em; */
        /* margin-bottom: 0.5em; */
        /* */} 
      </div>
  );
}